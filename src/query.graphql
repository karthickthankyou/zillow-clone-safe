query MyQuery {
  properties(take: 10) {
    address
    description
  }
}

# query searchCities($search: String!) {
#   search_cities(args: { search: $search }) {
#     lat
#     lng
#     displayName
#   }
# }

# query getCities {
#   cities(take: 10) {
#     displayName
#     lat
#     lng
#     image
#     propertiesCount
#   }
# }

query SearchHomesByLocation(
  $distinct: [PropertyScalarFieldEnum!]
  $skip: Int
  $take: Int
  $cursor: WhereUniqueInputNumber
  $orderBy: [PropertyOrderByWithRelationInput!]
  $where: PropertyWhereInput
) {
  properties(
    distinct: $distinct
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
  ) {
    id
    lat
    lng
    style
  }
}
# query SearchCitiesByLocation($take: Int, $where: location_stats_bool_exp) {
#   cities: location_stats(
#     take: $take
#     where: $where
#     order_by: { totalHomes: desc_nulls_last }
#   ) {
#     id
#     lat
#     lng
#     priceSqft
#     totalHomes
#   }
# }
# query SearchStatesByLocation($take: Int, $where: location_stats_bool_exp) {
#   states: location_stats(
#     take: $take
#     where: $where
#     order_by: { totalHomes: desc_nulls_last }
#   ) {
#     id
#     lat
#     lng
#     priceSqft
#     totalHomes
#   }
# }

query SearchHomesByLocationDetailed(
  $distinct: [PropertyScalarFieldEnum!]
  $skip: Int
  $take: Int
  $cursor: WhereUniqueInputNumber
  $orderBy: [PropertyOrderByWithRelationInput!]
  $where: PropertyWhereInput
) {
  properties(
    distinct: $distinct
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
  ) {
    id
    address
    bath
    beds
    price
    sqft
    plan
    imgs
    style
    yearBuilt
    lat
    lng
    city
  }
}
query GetMyHomes(
  $distinct: [PropertyScalarFieldEnum!]
  $skip: Int
  $take: Int
  $cursor: WhereUniqueInputNumber
  $orderBy: [PropertyOrderByWithRelationInput!]
  $where: PropertyWhereInput
) {
  properties(
    distinct: $distinct
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
  ) {
    id
    address
    bath
    beds
    price
    sqft
    plan
    imgs
    plan
    published
  }
}

query GetHomeById($where: PropertyWhereUniqueInput) {
  property(where: $where) {
    price
    id
    sqft
    bath
    beds
    address
    style
    imgs
  }
}

query GetRegionById($where: LocationStatsWhereUniqueInput) {
  locationStat(where: $where) {
    id
    totalHomes
    priceSqft
  }
}

# ($uid: String!)
query GetWishlistedHomes($uid: String!) {
  wishlisted: userHomes(
    where: { buyerUid: { equals: $uid }, type: WISHLISTED }
  ) {
    id
    propertyId
  }
}

query GetWishlistedHomesDetailed($uid: String!) {
  wishlisted: userHomes(
    where: { buyerUid: { equals: $uid }, type: WISHLISTED }
  ) {
    id
    propertyId
    property {
      address
      price
      imgs
    }
  }
}

query GetHome($where: PropertyWhereUniqueInput) {
  property(where: $where) {
    address
    bath
    beds
    city
    createdAt
    description
    facts
    features
    id
    lat
    lng
    lotSize
    price
    priceSqft
    sqft
    state
    style
    updatedAt
    yearBuilt
    zipcode
    imgs
  }
}

query GetMessages($uid: String!) {
  messages(where: { buyerUid: { equals: $uid } }) {
    id
    property {
      id
      address
      price
      imgs
    }
    message
    createdAt
  }
}

query GetEnquiries($uid: String!) {
  messages(where: { property: { is: { sellerUid: { equals: $uid } } } }) {
    id
    message
    createdAt
    property {
      id
      address
      price
      imgs
    }
  }
}

mutation SetHomePlan($id: Int!, $plan: Int) {
  updateProperty(updatePropertyInput: { id: $id, plan: $plan }) {
    plan
  }
}

mutation SetHomePublished($id: Int!, $published: Boolean) {
  updateProperty(updatePropertyInput: { id: $id, published: $published }) {
    plan
  }
}

mutation InsertUserHome($createUserHomeInput: CreateUserHomeInput!) {
  createUserHome(createUserHomeInput: $createUserHomeInput) {
    id
    propertyId
    type
    buyerUid
  }
}

mutation CreateMessage($createMessageInput: CreateMessageInput!) {
  createMessage(createMessageInput: $createMessageInput) {
    id
    propertyId
    updatedAt
    createdAt
    id
    buyer {
      uid
    }
    seller {
      uid
    }
    agent {
      uid
    }
  }
}

mutation CreateProperty($createPropertyInput: CreatePropertyInput!) {
  createProperty(createPropertyInput: $createPropertyInput) {
    address
    bath
    beds
    city
    createdAt
    description
    facts
    features
    id
    lat
    lng
    lotSize
    price
    priceSqft
    sqft
    state
    style
    updatedAt
    yearBuilt
    zipcode
  }
}

mutation UpdateUserHome($updateUserHomeInput: UpdateUserHomeInput!) {
  updateUserHome(updateUserHomeInput: $updateUserHomeInput) {
    id
    type
    propertyId
  }
}
